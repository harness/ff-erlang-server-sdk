searchNodes=[{"doc":"Public interface for client.","ref":"cfclient.html","title":"cfclient","type":"module"},{"doc":"Evaluate variation which returns a boolean.","ref":"cfclient.html#bool_variation/3","title":"cfclient.bool_variation/3","type":"function"},{"doc":"","ref":"cfclient.html#bool_variation/4","title":"cfclient.bool_variation/4","type":"function"},{"doc":"","ref":"cfclient.html#close/0","title":"cfclient.close/0","type":"function"},{"doc":"","ref":"cfclient.html#close/1","title":"cfclient.close/1","type":"function"},{"doc":"Evaluate variation which returns a JSON object.","ref":"cfclient.html#json_variation/3","title":"cfclient.json_variation/3","type":"function"},{"doc":"","ref":"cfclient.html#json_variation/4","title":"cfclient.json_variation/4","type":"function"},{"doc":"Evaluate variation which returns a number.","ref":"cfclient.html#number_variation/3","title":"cfclient.number_variation/3","type":"function"},{"doc":"","ref":"cfclient.html#number_variation/4","title":"cfclient.number_variation/4","type":"function"},{"doc":"Evaluate variation which returns a string.","ref":"cfclient.html#string_variation/3","title":"cfclient.string_variation/3","type":"function"},{"doc":"","ref":"cfclient.html#string_variation/4","title":"cfclient.string_variation/4","type":"function"},{"doc":"","ref":"cfclient.html#t:config/0","title":"cfclient.config/0","type":"type"},{"doc":"","ref":"cfclient.html#t:target/0","title":"cfclient.target/0","type":"type"},{"doc":"cfclient application.","ref":"cfclient_app.html","title":"cfclient_app","type":"module"},{"doc":"","ref":"cfclient_app.html#start/2","title":"cfclient_app.start/2","type":"function"},{"doc":"","ref":"cfclient_app.html#stop/1","title":"cfclient_app.stop/1","type":"function"},{"doc":"Functions to manage cache of Flag and Segment data from server.","ref":"cfclient_cache.html","title":"cfclient_cache","type":"module"},{"doc":"","ref":"cfclient_cache.html#cache_flag/1","title":"cfclient_cache.cache_flag/1","type":"function"},{"doc":"","ref":"cfclient_cache.html#cache_flag/2","title":"cfclient_cache.cache_flag/2","type":"function"},{"doc":"","ref":"cfclient_cache.html#cache_segment/1","title":"cfclient_cache.cache_segment/1","type":"function"},{"doc":"","ref":"cfclient_cache.html#cache_segment/2","title":"cfclient_cache.cache_segment/2","type":"function"},{"doc":"Get Flag or Segment from cache.","ref":"cfclient_cache.html#get_value/1","title":"cfclient_cache.get_value/1","type":"function"},{"doc":"","ref":"cfclient_cache.html#get_value/2","title":"cfclient_cache.get_value/2","type":"function"},{"doc":"","ref":"cfclient_cache.html#set_pid/1","title":"cfclient_cache.set_pid/1","type":"function"},{"doc":"Store flag or segment into cache with new value.","ref":"cfclient_cache.html#set_value/2","title":"cfclient_cache.set_value/2","type":"function"},{"doc":"","ref":"cfclient_cache.html#t:config/0","title":"cfclient_cache.config/0","type":"type"},{"doc":"","ref":"cfclient_cache.html#t:flag/0","title":"cfclient_cache.flag/0","type":"type"},{"doc":"","ref":"cfclient_cache.html#t:segment/0","title":"cfclient_cache.segment/0","type":"type"},{"doc":"Functions to manage client configuration.","ref":"cfclient_config.html","title":"cfclient_config","type":"module"},{"doc":"with Authenticate with server and merge project attributes into config","ref":"cfclient_config.html#authenticate/2","title":"cfclient_config.authenticate/2","type":"function"},{"doc":"","ref":"cfclient_config.html#create_tables/1","title":"cfclient_config.create_tables/1","type":"function"},{"doc":"","ref":"cfclient_config.html#defaults/0","title":"cfclient_config.defaults/0","type":"function"},{"doc":"","ref":"cfclient_config.html#delete_tables/1","title":"cfclient_config.delete_tables/1","type":"function"},{"doc":"","ref":"cfclient_config.html#get_config/0","title":"cfclient_config.get_config/0","type":"function"},{"doc":"","ref":"cfclient_config.html#get_config/1","title":"cfclient_config.get_config/1","type":"function"},{"doc":"","ref":"cfclient_config.html#get_table_names/1","title":"cfclient_config.get_table_names/1","type":"function"},{"doc":"","ref":"cfclient_config.html#get_value/1","title":"cfclient_config.get_value/1","type":"function"},{"doc":"","ref":"cfclient_config.html#get_value/2","title":"cfclient_config.get_value/2","type":"function"},{"doc":"","ref":"cfclient_config.html#init/1","title":"cfclient_config.init/1","type":"function"},{"doc":"","ref":"cfclient_config.html#is_retry_code/1","title":"cfclient_config.is_retry_code/1","type":"function"},{"doc":"","ref":"cfclient_config.html#normalize/1","title":"cfclient_config.normalize/1","type":"function"},{"doc":"","ref":"cfclient_config.html#parse_jwt/1","title":"cfclient_config.parse_jwt/1","type":"function"},{"doc":"","ref":"cfclient_config.html#set_config/1","title":"cfclient_config.set_config/1","type":"function"},{"doc":"","ref":"cfclient_config.html#set_config/2","title":"cfclient_config.set_config/2","type":"function"},{"doc":"","ref":"cfclient_config.html#t:config/0","title":"cfclient_config.config/0","type":"type"},{"doc":"Functions to make it easier to mock ETS","ref":"cfclient_ets.html","title":"cfclient_ets","type":"module"},{"doc":"","ref":"cfclient_ets.html#get/2","title":"cfclient_ets.get/2","type":"function"},{"doc":"","ref":"cfclient_ets.html#lookup/2","title":"cfclient_ets.lookup/2","type":"function"},{"doc":"Functions to evaluate flag rules.","ref":"cfclient_evaluator.html","title":"cfclient_evaluator","type":"module"},{"doc":"","ref":"cfclient_evaluator.html#bool_variation/3","title":"cfclient_evaluator.bool_variation/3","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#custom_attribute_to_binary/1","title":"cfclient_evaluator.custom_attribute_to_binary/1","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#is_rule_included_or_excluded/2","title":"cfclient_evaluator.is_rule_included_or_excluded/2","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#json_variation/3","title":"cfclient_evaluator.json_variation/3","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#number_variation/3","title":"cfclient_evaluator.number_variation/3","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#string_variation/3","title":"cfclient_evaluator.string_variation/3","type":"function"},{"doc":"","ref":"cfclient_evaluator.html#t:config/0","title":"cfclient_evaluator.config/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:flag/0","title":"cfclient_evaluator.flag/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:rule/0","title":"cfclient_evaluator.rule/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:rule_clause/0","title":"cfclient_evaluator.rule_clause/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:rule_serve/0","title":"cfclient_evaluator.rule_serve/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:segment/0","title":"cfclient_evaluator.segment/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:target/0","title":"cfclient_evaluator.target/0","type":"type"},{"doc":"","ref":"cfclient_evaluator.html#t:variation_map/0","title":"cfclient_evaluator.variation_map/0","type":"type"},{"doc":"Feature flags client instance. It creates the ETS tables used to cache flag data from the server and flag usage metrics. It runs periodic tasks to pull data from the server and send metrics to it. An default instance is started by the cfclient application. Additional instances can be started if multiple Harness projects need to be used. project.","ref":"cfclient_instance.html","title":"cfclient_instance","type":"module"},{"doc":"","ref":"cfclient_instance.html#handle_call/3","title":"cfclient_instance.handle_call/3","type":"function"},{"doc":"","ref":"cfclient_instance.html#handle_cast/2","title":"cfclient_instance.handle_cast/2","type":"function"},{"doc":"","ref":"cfclient_instance.html#handle_info/2","title":"cfclient_instance.handle_info/2","type":"function"},{"doc":"","ref":"cfclient_instance.html#init/1","title":"cfclient_instance.init/1","type":"function"},{"doc":"","ref":"cfclient_instance.html#start_link/1","title":"cfclient_instance.start_link/1","type":"function"},{"doc":"","ref":"cfclient_instance.html#stop/1","title":"cfclient_instance.stop/1","type":"function"},{"doc":"Functions to record, process, and send cached metric data.","ref":"cfclient_metrics.html","title":"cfclient_metrics","type":"module"},{"doc":"Gather metrics and send them to server. Called periodically by cfclient_instance.","ref":"cfclient_metrics.html#process_metrics/1","title":"cfclient_metrics.process_metrics/1","type":"function"},{"doc":"Record metrics for request.","ref":"cfclient_metrics.html#record/5","title":"cfclient_metrics.record/5","type":"function"},{"doc":"","ref":"cfclient_metrics.html#t:config/0","title":"cfclient_metrics.config/0","type":"type"},{"doc":"Funcctions to pull feature and target configuration from server via the API.","ref":"cfclient_retrieve.html","title":"cfclient_retrieve","type":"module"},{"doc":"Retrieve all features from Feature Flags API.","ref":"cfclient_retrieve.html#retrieve_flags/1","title":"cfclient_retrieve.retrieve_flags/1","type":"function"},{"doc":"Retrieve all segments from Feature Flags API.","ref":"cfclient_retrieve.html#retrieve_segments/1","title":"cfclient_retrieve.retrieve_segments/1","type":"function"},{"doc":"","ref":"cfclient_retrieve.html#t:config/0","title":"cfclient_retrieve.config/0","type":"type"},{"doc":"","ref":"cfclient_retrieve.html#t:flag/0","title":"cfclient_retrieve.flag/0","type":"type"},{"doc":"","ref":"cfclient_retrieve.html#t:segment/0","title":"cfclient_retrieve.segment/0","type":"type"},{"doc":"Top level supervisor for cfclient. Called by application, starting up the default client instance.","ref":"cfclient_sup.html","title":"cfclient_sup","type":"module"},{"doc":"","ref":"cfclient_sup.html#init/1","title":"cfclient_sup.init/1","type":"function"},{"doc":"","ref":"cfclient_sup.html#start_link/1","title":"cfclient_sup.start_link/1","type":"function"},{"doc":"Harness is a feature management platform that helps teams to build better software and to test features quicker. This repository contains our Feature Flags SDK for Erlang and other BEAM languages such as Elixir.","ref":"readme.html","title":"Erlang SDK For Harness Feature Flags","type":"extras"},{"doc":"Intro &lt;br&gt; Requirements &lt;br&gt; Quickstart &lt;br&gt; Further Reading &lt;br&gt; Build Instructions &lt;br&gt;","ref":"readme.html#table-of-contents","title":"Erlang SDK For Harness Feature Flags - Table of Contents","type":"extras"},{"doc":"This sample doesn’t include configuration options. For in depth steps and configuring the SDK, e.g. disabling streaming or using our Relay Proxy, see the Erlang SDK Reference For a sample FF Erlang SDK project, see our test Erlang project . For a sample FF Erlang SDK Project for Elixir, see our test Elixir Project . For Erlang applications, install: Erlang/OTP 24 or later Rebar3 3.20.0 or later Important, since version 2.0.1 the SDK depends on an Elixir hashing library, so the following is also required for Erlang applications: Elixir 1.13.4 or later available on your build system Rebar3 rebar_mix plugin installed in your Rebar3 plugins For Elixir applications, install: Elixir version 1.13.4 or later OTP 24 or later","ref":"readme.html#intro","title":"Erlang SDK For Harness Feature Flags - Intro","type":"extras"},{"doc":"To follow along with our test code sample, make sure you have: Created a Feature Flag on the Harness Platform called harnessappdemodarkmode Created a server SDK key and made a copy of it","ref":"readme.html#quickstart","title":"Erlang SDK For Harness Feature Flags - Quickstart","type":"extras"},{"doc":"For Erlang applications To install the SDK for Erlang based applications: Add the SDK as a dependency to your rebar.config file: { deps , [ { cfclient , &quot;2.0.1&quot; , { pkg , harness_ff_erlang_server_sdk } } ] } . Add the dependency to your project's app.src . { applications , [ kernel , stdlib , cfclient ] } , Add the rebar_mix plugin to your rebar.config file: { project_plugins , [ rebar_mix ] } . Imporatant: for this plugin to work ensure you have Elixir 1.13.4 or later installed onto your build system For Elixir applications To install the SDK for Elixir based applications: Add the SDK as a dependency to mix.exs deps() : defp deps do [ { : cfclient , &quot;~&gt; 2.0.1&quot; , hex : : harness_ff_erlang_server_sdk } ]","ref":"readme.html#install-the-sdk","title":"Erlang SDK For Harness Feature Flags - Install the SDK","type":"extras"},{"doc":"Erlang Provide your API key in sys.config using an environment variable: [ { cfclient , [ { api_key , { environment_variable , &quot;YOUR_API_KEY_ENV_VARIABLE&quot; } , ] } ] . Or you may provide the API key directly if required: [ { cfclient , [ { api_key , &quot;YOUR_API_KEY&quot; } , ] } ] . Elixir Provide your API key in config/prod.exs using an environment variable: : config :cfclient , api_key : System . get_env ( &quot;YOUR_API_KEY_ENVIRONMENT_VARIABLE&quot; ) Or you may provide the API key directly if required: config :cfclient , api_key : &quot;YOUR_API_KEY&quot;","ref":"readme.html#configuration","title":"Erlang SDK For Harness Feature Flags - Configuration","type":"extras"},{"doc":"Optionally you may set the required log level of the SDK. If not provided, the SDK will default to warning . Elixir logging configuration example config :cfclient , # Set the log level of the SDK to debug log_level : :debug [ api_key : System . get_env ( &quot;FF_API_KEY_0&quot; ) , # For additional config you can pass in, see Erlang SDK docs: https://github.com/harness/ff-erlang-server-sdk/blob/main/docs/further_reading.md#further-reading # we are just using the main config url here as an example. config : [ config_url : &quot;https://config.ff.harness.io/api/1.0&quot; , events_url : &quot;https://events.ff.harness.io/api/1.0&quot; , poll_interval : 60000 , analytics_enabled : true ] ] Erlang logging configuration example [ { cfclient , [ %% Set the log level of the SDK to debug { log_level , debug } , { api_key , { envrionment_variable , &quot;YOUR_API_KEY_ENV_VARIABLE&quot; } , { config , [ { config_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { events_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { poll_interval , 60 } , { analytics_enabled , true } , ] } , ] } ] Enable Verbose Evaluation Logs Evaluation logs are debug level by default. If required, they can be changed to info level. This is useful if production environments do not use debug level, but there is a requirement to check low level evaluation logs. Note that this will only affect evaluation log statements. Elixir config :cfclient , # Set the log level of the SDK to debug log_level : :debug , verbose_evaluation_logs : true , [ api_key : System . get_env ( &quot;FF_API_KEY_0&quot; ) , # For additional config you can pass in, see Erlang SDK docs: https://github.com/harness/ff-erlang-server-sdk/blob/main/docs/further_reading.md#further-reading # we are just using the main config url here as an example. config : [ config_url : &quot;https://config.ff.harness.io/api/1.0&quot; , events_url : &quot;https://events.ff.harness.io/api/1.0&quot; , poll_interval : 60000 , analytics_enabled : true ] ] Erlang [ { cfclient , [ %% Set the log level of the SDK to debug { log_level , error } , { verbose_evaluation_logs , true } , { api_key , { envrionment_variable , &quot;YOUR_API_KEY_ENV_VARIABLE&quot; } , { config , [ { config_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { events_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { poll_interval , 60 } , { analytics_enabled , true } , ] } , ] } ]","ref":"readme.html#set-logging-level","title":"Erlang SDK For Harness Feature Flags - Set logging level","type":"extras"},{"doc":"The SDK by default starts up a single instance called default which is configured with your project API key. If different parts of your application need to use specific projects , you can start up additional client instances using by defining additional configuration for each unique project. Erlang Project Config The additional project config is defined in sys.config The following sys.config snippet starts up two additional instances as well along with the default instance: [ %% Project config name: This is an arbitrary identifier, but it must be unique per project config you define. { harness_project_1_config , [ { cfclient , [ { config , [ %% Instance name: This must be unique across all of the project configs. E.g. it cannot be the same as an instance name %% in another project config. %% It will be the name you use when calling SDK API functions like `bool_variation/4`, { name , instance_name_1 } ] } , %% The API key for the Harness project you want to use with this SDK instance. { api_key , { environment_variable , &quot;PROJECT_1_API_KEY&quot; } } ] } ] } , { harness_project_2_config , [ { cfclient , [ { config , [ { name , instance_name_2 } ] } , { api_key , { environment_variable , &quot;PROJECT_2_API_KEY&quot; } } ] } ] } , { cfclient , [ { api_key , { environment_variable , &quot;FF_API_KEY&quot; } } , { config , [ { config_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { events_url , &quot;https://config.ff.harness.io/api/1.0&quot; } ] } , { analytics_push_interval , 60000 } ] } ] . Note: if the default instance fails to start, for example due to an authentication error with the API key, then the SDK will fail to boot and the additional instances won't start. If you don't require the default instance to be started up, you can do: % ... additional project config { cfclient , [ { start_default_instance , false } , %% The remaining tuples will be ignored, so you can choose to include or omit them. { api_key , { environment_variable , &quot;FF_API_KEY&quot; } } , { config , [ { config_url , &quot;https://config.ff.harness.io/api/1.0&quot; } , { events_url , &quot;https://config.ff.harness.io/api/1.0&quot; } ] } , { analytics_push_interval , 60000 } ] } , In your application supervisor, e.g. src/myapp_sup.erl , start up a cfclient_instance for each additional project. As the default instance is booted when your application starts, you cannot (and don't need to) start it here. init ( Args ) -&gt; HarnessProject1Args = application : get_env ( harness_project_1_config , cfclient , [ ] ) , HarnessProject2Args = application : get_env ( harness_project_2_config , cfclient , [ ] ) , ChildSpec1 = \#{ id =&gt; project1_cfclient_instance , start =&gt; { cfclient_instance , start_link , [ HarnessProject1Args ] } } , ChildSpec2 = \#{ id =&gt; project2_cfclient_instance , start =&gt; { cfclient_instance , start_link , [ HarnessProject2Args ] } } , MaxRestarts = 1000 , MaxSecondsBetweenRestarts = 3600 , SupFlags = \#{ strategy =&gt; one_for_one , intensity =&gt; MaxRestarts , period =&gt; MaxSecondsBetweenRestarts } , { ok , { SupFlags , [ ChildSpec1 , ChildSpec2 ] } } . Using a specific instance of the SDK To use a specific SDK instance, you provide the instance name to the public function you are calling. For example bool_variation/4 . The following is an example of referencing the instances we have created above: - module ( multi_instance_example ) . - export ( [ multi_instance_evaluations / 0 ] ) . multi_instance_evaluations ( ) -&gt; Target = \#{ identifier =&gt; &quot;Harness_Target_1&quot; , name =&gt; &quot;HT_1&quot; , attributes =&gt; \#{ email =&gt; &lt;&lt; &quot;demo@harness.io&quot; &gt;&gt; } } , %% Instance 1 Project1Flag = &lt;&lt; &quot;harnessappdemodarkmodeproject1&quot; &gt;&gt; , Project1Result = cfclient : bool_variation ( instance_name_1 , Project1Flag , Target , false ) , logger : info ( &quot;Instance Name 1 : Variation for Flag ~p with Target ~p is: ~p ~n &quot; , [ Project1Flag , maps : get ( identifier , Target ) , Project1Result ] ) , %% Instance 2 Project2Flag = &lt;&lt; &quot;harnessappdemodarkmodeproject2&quot; &gt;&gt; , Project2Result = cfclient : bool_variation ( instance_name_2 , Project2Flag , Target , false ) , logger : info ( &quot;Instance name 2 Variation for Flag ~p with Target ~p is: ~p ~n &quot; , [ Project2Flag , maps : get ( identifier , Target ) , Project2Result ] ) . %% Default instance DefaultProjectFlag = &lt;&lt; &quot;harnessappdemodarkmodeprojectdefault&quot; &gt;&gt; , DefaultProjectResult = cfclient : bool_variation ( Project2Flag , Target , false ) , logger : info ( &quot;Default instance Variation for Flag ~p with Target ~p is: ~p ~n &quot; , [ DefaultProjectFlag , maps : get ( identifier , Target ) , DefaultProjectResult ] ) . Elixir Create project configurations for each new instance you would like to start in your config/config.exs file: # Config for &quot;project 1&quot; config :elixirsample , project1 : [ api_key : System . get_env ( &quot;FF_API_KEY_1&quot; ) , config : [ name : :project1 ] ] # Config for &quot;project 2&quot; config :elixirsample , project2 : [ api_key : System . get_env ( &quot;FF_API_KEY_2&quot; ) , config : [ name : :project2 ] ] In your application supervisor, e.g. lib/myapp/supervisor.ex , start up cfclient_instance for each of the additional project configurations you provided above. As the default instance is booted when your application starts, you cannot (and don't need to) start it here: def init ( _opts ) do project_1_config = Application . get_env ( :elixirsample , :project1 , [ ] ) project_2_config = Application . get_env ( :elixirsample , :project2 , [ ] ) children = [ %{ id : :project1_cfclient_instance , start : { :cfclient_instance , :start_link , [ project_1_config ] } , type : :supervisor } , %{ id : :project2_cfclient_instance , start : { :cfclient_instance , :start_link , [ project_2_config ] } , type : :supervisor } , ] Supervisor . init ( children , strategy : :one_for_one ) end To use a specific SDK instance, you provide the instance name to the public function you are calling. For example use bool_variation/4 instead of bool_variation/3 - see the following code sample: defmodule ElixirSample.EvaluationSample do require Logger def getFlagLoop ( ) do target = %{ identifier : &quot;harness&quot; , name : &quot;Harness&quot; , anonymous : false , attributes : %{ } } # Default instance flag = &quot;projectflag&quot; result = :cfclient . bool_variation ( flag , target , false ) Logger . info ( &quot;SVariation for Flag \#{ flag } with Target \#{ inspect ( target ) } is: \#{ result } &quot; ) # Instance 1 project_1_flag = &quot;project1flag&quot; project_1_result = :cfclient . number_variation ( :project1 , project_1_flag , target , 3 ) Logger . info ( &quot;SDK instance 1: Variation for Flag \#{ project_1_flag } with Target \#{ inspect ( target ) } is: \#{ project_1_result } &quot; ) # Instance 2 project_2_flag = &quot;project2flag&quot; project_2_result = :cfclient . bool_variation ( :project2 , project_2_flag , target , false ) Logger . info ( &quot;SDK instance 2: Variation for Flag \#{ project_2_flag } with Target \#{ inspect ( target ) } is: \#{ project_2_result } &quot; ) Process . sleep ( 10000 ) getFlagLoop ( ) # Default instance default_project_flag = &quot;defaultflag&quot; default_project_result = :cfclient . bool_variation ( default_project_flag , target , false ) Logger . info ( &quot;Default instance: Variation for Flag \#{ default_project_flag } with Target \#{ inspect ( target ) } is: \#{ default_project_result } &quot; ) Process . sleep ( 10000 ) getFlagLoop ( ) end end","ref":"readme.html#run-multiple-instances-of-the-sdk","title":"Erlang SDK For Harness Feature Flags - Run multiple instances of the SDK","type":"extras"},{"doc":"Erlang Call the API to get the value of the harnessappdemodarkmode flag you created via https://www.harness.io/ . get_flag_loop ( ) -&gt; Target = \#{ identifier =&gt; &quot;Harness_Target_1&quot; , name =&gt; &quot;HT_1&quot; , %% Attribute keys must be atoms. %% Values must be either bitstrings, atoms, or a list of bitstrings/atoms - see Targets with custom attributes section below. attributes =&gt; \#{ email =&gt; &lt;&lt; &quot;demo@harness.io&quot; &gt;&gt; } } , FlagIdentifier = &quot;harnessappdemodarkmode&quot; , Result = cfclient : bool_variation ( FlagIdentifier , Target , false ) , logger : info ( &quot;Variation for Flag ~p witih Target ~p is: ~p ~n &quot; , [ FlagIdentifier , maps : get ( identifier , Target ) , Result ] ) , timer : sleep ( 10000 ) , get_flag_loop ( ) . Elixir Call the API to get the value of the harnessappdemodarkmode flag you created via https://www.harness.io/ . def getFlagLoop ( ) do target = %{ identifier : &quot;Harness_Target_1&quot; , name : &quot;HT_1&quot; # Attribute keys must be atoms. # Values must be either binaries, atoms, or a list of binaries/atoms. # See &quot;targets with custom attributes&quot; below. attributes : %{ email : &quot;demo@harness.io&quot; } } flag_identifier = &quot;harnessappdemodarkmode&quot; result = :cfclient . bool_variation ( flag_identifier , target , false ) Logger . info ( &quot;Variation for Flag \#{ flag_identifier } with Target \#{ inspect ( target ) } is: \#{result)&quot; ) Process . sleep ( 10000 ) getFlagLoop ( )","ref":"readme.html#code-sample","title":"Erlang SDK For Harness Feature Flags - Code Sample","type":"extras"},{"doc":"You can use the attributes map to provide custom attributes. If the target isn't anonymous, the attributes will shortly appear in the Harness UI after an evaluation using the target. You can create Group Rules based on these attributes. Note: attribute keys must be atoms and the values must either be binaries or atoms or a list of binaries or atoms . Erlang: TargetBetaGroup = \#{ &#39;identifier&#39; =&gt; &lt;&lt; &quot;my_target&quot; &gt;&gt; , name =&gt; &lt;&lt; &quot;my_target_name&quot; &gt;&gt; , anonymous =&gt; &lt;&lt; &quot;&quot; &gt;&gt; , attributes =&gt; \#{ beta =&gt; &lt;&lt; &quot;beta_group_1&quot; &gt;&gt; } } , TargetBetaGroups = \#{ &#39;identifier&#39; =&gt; &lt;&lt; &quot;my_other_target&quot; &gt;&gt; , name =&gt; &lt;&lt; &quot;my_other_target_name&quot; &gt;&gt; , anonymous =&gt; &lt;&lt; &quot;&quot; &gt;&gt; , attributes =&gt; \#{ beta =&gt; [ &lt;&lt; &quot;beta_group_1&quot; &gt;&gt; , &#39;beta_group_2&#39; ] } } } , TargetAlphaGroup = \#{ &#39;identifier&#39; =&gt; &lt;&lt; &quot;my_alpha_target&quot; &gt;&gt; , name =&gt; &lt;&lt; &quot;my_alpha_target_name&quot; &gt;&gt; , anonymous =&gt; &lt;&lt; &quot;&quot; &gt;&gt; , attributes =&gt; \#{ alpha =&gt; &#39;alpha_group_1&#39; } } , Elixir target_beta_group = %{ identifier : &quot;my_target&quot; , name : &quot;my_target_name&quot; , anonymous : &quot;&quot; , attributes : %{ beta : &quot;beta_group_1&quot; } } target_beta_groups = %{ identifier : &quot;my_other_target&quot; , name : &quot;my_other_target_name&quot; , anonymous : &quot;&quot; , attributes : %{ beta : [ &quot;beta_group_1&quot; , :beta_group_2 ] } } target_alpha_group = %{ identifier : &quot;my_alpha_target&quot; , name : &quot;my_alpha_target_name&quot; , anonymous : &quot;&quot; , attributes : %{ alpha : :alpha_group_1 } }","ref":"readme.html#targets-with-custom-attributes","title":"Erlang SDK For Harness Feature Flags - Targets with custom attributes","type":"extras"},{"doc":"For further examples and config options, see the Erlang SDK Further Reading . For more information about Feature Flags, see our Feature Flags documentation .","ref":"readme.html#additional-reading","title":"Erlang SDK For Harness Feature Flags - Additional Reading","type":"extras"},{"doc":"In order to run the tests, pull the submodules: git submodule update --init","ref":"readme.html#contributing","title":"Erlang SDK For Harness Feature Flags - Contributing","type":"extras"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets &quot;[]&quot; replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same &quot;printed page&quot; as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","ref":"license.html","title":"LICENSE","type":"extras"}]